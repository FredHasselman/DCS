[
["lecture-1.html", "Lecture 1 ", " Lecture 1 "],
["modeling-change-processes-in-1d.html", "Modeling change processes in 1D", " Modeling change processes in 1D The simplest non-trivial iterative change process can be described by the following difference equation: \\[\\begin{equation} Y_{t+1} = Y_{t=0} + a*Y_t \\tag{1.1} \\end{equation}\\] Equation (1.1) describes the way in which the value of \\(Y\\) changes between two adjacent, discrete moments in time (hence the term difference equation, or recurrence relation). There are two parameters resembling an intercept and a slope: The starting value \\(Y_0\\) at \\(t=0\\), also called the starting value, or the initial conditions. A rule for incrementing time, here the change in \\(Y\\) takes place over a discrete time step of 1: \\(t+1\\). The values taken on by variable \\(Y\\) are considered to represent the states quantifiable observable leAlternative ways to describe the change of states : A dynamical rule describing the propagation of the states of a system observable measured by the values of variable Y through discrete time. A dynamic law describing the time-evolution of the states of a system observable measured by the variable Y. These descriptions all refer to the change processes that govern system observables (properties of dynamical systems that can be observed through measurement). It’s a line! It’s a plane! The formula resembles the equation of a line. There is a constant value \\(Y_{0}\\) which is added to a proportion of the value of \\(Y\\) at time \\(t\\), given by parameter \\(a\\). This is equivalent to the slope of a line. However, in a \\((X,Y)\\) plane there are two ‘spatial’ (metric) dimensions representing the values two variables \\(X\\) and \\(Y\\) can take on (see figure). The best fitting straight line would be called a statistical model of the linear relationship between the observed values of \\(X\\) and \\(Y\\). It can be obtained by fitting a General Linear Model (GLM) to the data. If \\(X\\) were to represent repeated measurements the multivariate GLM for repeated measures would have to be fitted to the data. This can be very problematic, because statistical models rely on Ergodic theory: “… it is the study of the long term average behavior of systems evolving in time.”1 need to assume independence of measurements within and between subjects. These assumptions can be translated to certain conditions that must hold for the model to be valid, known as Compound Symmetry and Sphericity: The compound symmetry assumption requires that the variances (pooled within-group) and covariances (across subjects) of the different repeated measures are homogeneous (identical). This is a sufficient condition for the univariate F test for repeated measures to be valid (i.e., for the reported F values to actually follow the F distribution). However, it is not a necessary condition. The sphericity assumption is a necessary and sufficient condition for the F test to be valid; it states that the within-subject “model” consists of independent (orthogonal) components. The nature of these assumptions, and the effects of violations are usually not well-described in ANOVA textbooks;2 As you can read in the quoted text above, these conditions must hold in order to be able to identify unique independent components as the sources of variation of \\(Y\\) over time within a subject. This is the a clear example of: It is the theory that decides what we may observe3 If you choose to use GLM repeated measures to model change over time, you will only be able to infer independent components that are responsible for the time-evolution of \\(Y\\). As is hinted in the last sentence of the quote, the validity of such inferences is not a common topic of discussion statistics textbooks. No! … It’s a time series! The important difference between a regular 2-dimensional Euclidean plane and the space in which we model change processes is that the \\(X\\)-axis represents the physical dimension time. In the case of the Linear Map we have a 1D space with one ‘spatial’ dimension \\(Y\\) and a time dimension \\(t\\). This is called time series if \\(Y\\) is sampled as a continuous process, or a trial series if the time between subsequent observations is not relevant, just the fact that there was a temporal order (for example, a series of response latencies to trials in a psychological experiment in the order in which they were presented to the subject). Time behaves different from a spatial dimension in that it is directional (time cannot be reversed), it cannot take on negative values, and, unless one is dealing with a truly random process, there will be a temporal correlation across one or more values of \\(Y\\) seperated by an amount of time. In the linear difference equation this occurs because each value one step in the future is calculated based on the current value. If the values of \\(Y\\) represent an observable of a dynamical system, the system can be said to have a history, or a memory. Ergodic systems do not have a history or a memory that extends across more than one time step. This is very convenient, because one can calculate the expected value of a system observable given infinite time, by making use of of the laws of probabilities of random events (or random fields). This means: The average of an observable of an Ergodic system measured across infinite time (its entire history, the time-average), will be the be the same value as the average of this observable measured at one instance in time, but in an infinite amount of systems of the same kind (the population, the spatial average).4 The simple linear difference equation will have a form of *perfect memory’ across the smallest time scale (i.e., the increment of 1, \\(t+1\\)). This ‘memory’ concerns a correlation of 1 between values at adjacent time points (a short range temporal correlation, SRC), because the change from \\(Y_t\\) to \\(Y_{t+1}\\) is exactly equal to \\(a * Y_t\\) at each iteration step. This is the meaning of deterministic, not that each value of \\(Y\\) is the same, but that the value of \\(Y\\) now can be perfectly explained form the value of \\(Y\\) one moment in the past. Summarising, the most profound difference is not the fact that the equation of linear change is a deterministic model and the GLM is a probabilistic model with parameters fitted from data, this is something we can (and will) do for \\(a\\) as well. The profound difference between the models is the role given to the passage of time: The linear difference equation represents changes in \\(Y\\) as a function of the physical dimension time and \\(Y\\) itself. The GLM represents changes in \\(Y\\) as a function of a linear predictor composed of additive components that can be regarded as independent sources of variation that sum up to the observed values of \\(Y\\). --> See Dajani &amp; Dirksin (2008, p. 5, “A simple introduction to Ergodic Theory”)↩ Retreived from www.statsoft.com↩ Einstein as quoted by Heisenberg.↩ In other words: If you throw 1 die 100 times in a row, the average of the 100 numbers is the time-average of one of the observables of die-throwing systems. If this system is ergodic, then its time-average is expected to be similar to the average of the numbers that turn up if you throw 100 dice all at the same instance of time. The dice layed out on the table represent a spatial sample, a snapshot frozen in time, of the possible states the system can be in. Taking the average would be the spatial average this observable of die-throwing systems. This ergodic condiciotn is often implicitly assumed in Behavioural Science when studies claim to study change by taking different samples of individuals (snapshots of system states) and comparing if they are the same.↩ "],
["lecture-2.html", "Lecture 2 ", " Lecture 2 "],
["numerical-integration.html", "Numerical integration", " Numerical integration In order to ‘solve’ a differential equation for continuous time using a method of numerical integration, one could code it like in the spreadsheet assignment below. For R and Matlab there are so-called solvers available, functions that will do the integration for you. For R look at the Examples in package deSolve. Euler’s method and more… The result of applying a method of numerical integration is called a numerical solution of the differential equation. The analytical solution is the equation which will give you a value of \\(Y\\) for any point in time, given an initial value \\(Y_0\\). Systems which have an analytical solution can be used to test the accuracy of numerical solutions. Analytical solution Remember that the analytical solution for the logistic equation is: \\[ Y(t) = \\frac{K}{1 + \\left(\\frac{K}{Y_{0} - 1}\\right) * e^{-r*t} } \\] If we want to know the growth level \\(Y_t\\) at \\(t=10\\), with \\(Y_0=.0001\\), \\(r=1.1\\) and \\(K=4\\), we can just fill it in: # Define a function for the solution logSol &lt;- function(Y0, r, K, t){K/(1+(K/Y0-1)*exp(-r*t))} # Call the function logSol(Y0=.0001, r=1.1, K=4, t=10) ## [1] 2.398008 We can pas a vector of timepoints to create the exact solution, the same we would get if we were to iterate the differential/difference equation. # Plot from t=1 to t=100 plot(logSol(Y0=.0001, r=1.1, K=4, t=seq(1,20)), type = &quot;b&quot;, ylab = expression(Y[t]), xlab = &quot;t&quot;) # Plot t=10 in red points(10,logSol(Y0=.0001, r=1.1, K=4, t=10), col=&quot;red&quot;, pch=16) Numerical solution (discrete) If we would iterate the differential equation … \\[ \\frac{dY}{dt} = Y_t * (1 + r - r * \\frac{Y_t}{K}) \\] … as if it were a difference equation, that is, not simulating continuous time. logIter &lt;- function(Y0,r,K,t){ N &lt;- length(t) Y &lt;- as.numeric(c(Y0, rep(NA,N-2))) sapply(seq_along(Y), function(t){ Y[[t+1]] &lt;&lt;- Y[t] * (1 + r - r * Y[t] / K)}) } # Plot from t=1 to t=100 plot(logIter(Y0=.0001, r=1.1, K=4, t=seq(1,20)), type = &quot;b&quot;, ylab = expression(Y[t]), xlab = &quot;t&quot;) # Plot t=10 in red points(10,logSol(Y0=.0001, r=1.1, K=4, t=10), col=&quot;red&quot;, pch=16) -->"],
["lecture-3.html", "Lecture 3", " Lecture 3 "],
["lecture-4.html", "Lecture 4", " Lecture 4 It will become increasingly difficult to use software like Excel and SPSS. Perhaps now is a good time to switch to R or Matlab. We do have a spreadsheet example of Standardised Dispersion Anaysis. "],
["using-r-install-functions-in-nlrtsa.html", "1.1 Using R: Install functions in nlRtsa", " 1.1 Using R: Install functions in nlRtsa First, download (from blackboard) and source('nlRtsa_SOURCE.R'), or source it directly from Github if you have package devtools installed. library(devtools) source_url(&quot;https://raw.githubusercontent.com/FredHasselman/DCS/master/functionLib/nlRtsa_SOURCE.R&quot;) ## SHA-1 hash of file is bfd28c6b00e5c1c679d8b88fe8ed2bf34314f927 We need packages signal and pracma Among nlRtsa functions is in.IT(), which will load a list of packages and install them, but only if they are not present on your system. in.IT(c(&quot;signal&quot;,&quot;pracma&quot;)) ## Loading required package: signal ## ## Attaching package: &#39;signal&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, poly ## Loading required package: pracma ## ## Attaching package: &#39;pracma&#39; ## The following objects are masked from &#39;package:signal&#39;: ## ## conv, ifft, interp1, pchip, polyval, roots You can of course also use install.packages() or the GUI. "],
["examples-fast-fourier-transform-and-power-spectrum.html", "Examples: Fast Fourier transform and Power Spectrum", " Examples: Fast Fourier transform and Power Spectrum Below is an example of a signal built from sine components (y) whose relative amplitudes are recovered in the powerspectrum. # Sawtooth x &lt;- seq(-3.2,3.2, length.out = 256) y &lt;- 2*sin(10*x) - 1*sin(20*x) + (2/3)*sin(30*x) - (1/2)*sin(40*x) + (2/5)*sin(50*x) - (1/4)*sin(60*x) # Plot the sawtooth wave as constructed by the Fourier series above plot(x,y, xlab =&#39;Time (a.u.)&#39;, ylab = &#39;Variable (a.u.)&#39;, main =&#39;Sawtooth wave&#39;, type = &quot;l&quot;) # Perform a Fast Fourier Transform and calculate the Power and Frequency Y &lt;- fft(y) Pyy &lt;- Y*Conj(Y)/256 f &lt;- 1000/256*(0:127) # Plot the power spectrum of the sawtooth wave plot(f[1:50],Pyy[1:50], type=&quot;b&quot;,xlab=&#39;Frequency (a.u.)&#39;, ylab =&#39;Power (a.u.)&#39;, pch=21, bg=&#39;grey60&#39;, main = &#39;Power Spectrum&#39;) Now we do the same for a very noisy signal into which we insert a frequency. # A time vector t &lt;- pracma::linspace(x1 = 0, x2 = 50, n = 256) # There are three sine components x &lt;- sin(2*pi*t/.1) + sin(2*pi*t/.3) + sin(2*pi*t/.5) # Add random noise! y &lt;- x + 1*randn(size(t)) # Plot the noise. plot(t, y, type = &quot;l&quot;, xlab = &#39;Time (a.u.)&#39;, ylab = &#39;Variable (a.u.)&#39;, main = &#39;A very noisy signal&#39;) # Get the frequency domain Y &lt;- fft(y) Pyy &lt;- Y*Conj(Y)/256 f &lt;- 1000/256*(0:127) # Plot the power spectrum of this noise plot(f[1:50],Pyy[1:50], type=&quot;b&quot;,xlab=&#39;Frequency (a.u.)&#39;, ylab=&#39;Power (a.u.)&#39;, pch=21, bg=&#39;grey60&#39;, main = &#39;Power Spectrum&#39;) More information about the Fourier transform -->"],
["lecture-5.html", "Lecture 5", " Lecture 5 "],
["lecture-6.html", "Lecture 6", " Lecture 6 "],
["lecture-7.html", "Lecture 7", " Lecture 7 "],
["lecture-8.html", "Lecture 8", " Lecture 8 "],
["lecture-9.html", "Lecture 9", " Lecture 9 "]
]
